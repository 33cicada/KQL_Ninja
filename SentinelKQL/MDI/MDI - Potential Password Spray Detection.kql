//This query detects potential password spray attacks by comparing recent failed login attempts against historical averages for enabled accounts. It summarizes failed logon attempts by user, application, and source IP, flagging accounts with abnormally high failure rates that could indicate targeted attacks.
let lookback = 3d;
let timeWindow = 1h;
let threshold = 2; 
let EnabledAccounts = 
    IdentityInfo
    | where TimeGenerated >= ago(lookback) 
    | where IsAccountEnabled
    | where isnotempty(AccountUPN)
    | project AccountUPN = tolower(AccountUPN), AccountName = AccountName
    | distinct AccountUPN, AccountName;
let AverageFailedLogonPerUser = 
    IdentityLogonEvents
    | where TimeGenerated > ago(lookback)
    | where ActionType == "LogonFailed"
    | where isnotempty(AccountUpn)
    | where AccountUpn in~ (EnabledAccounts)
    | summarize FailedCount = count() by bin(TimeGenerated, 1m), AccountUpn = tolower(AccountUpn)
    | summarize 
        FailedLogonAverage = avg(FailedCount),
        FailedLogonStdDev = stdev(FailedCount),
        SampleCount = count()
      by AccountUpn
    | where SampleCount > 5
    | project AccountUpn, FailedLogonAverage, FailedLogonStdDev;
// Check recent failed logons against historical patterns
SigninLogs
| where TimeGenerated >= ago(timeWindow)
| where IsInteractive
| where ResultType !in (0, 50125, 50140) // Filter to failed sign-ins
| where UserPrincipalName in~ (EnabledAccounts)
| summarize 
    RecentFailedAttempts = count(),
    IPAddresses = make_set(IPAddress, 10), // Limit to 10 IPs to reduce size
    TimeGenerated = max(TimeGenerated)
  by UserPrincipalName = tolower(UserPrincipalName), AppDisplayName
| join kind=inner AverageFailedLogonPerUser on $left.UserPrincipalName == $right.AccountUpn
| extend DeviationFromAverage = (RecentFailedAttempts - FailedLogonAverage) / FailedLogonStdDev
| where DeviationFromAverage > threshold or (RecentFailedAttempts > 5 and FailedLogonAverage < 1)
| join kind=leftouter EnabledAccounts on $left.UserPrincipalName == $right.AccountUPN
| extend IPString = strcat_array(IPAddresses, ",")
| summarize
    TimeGenerated = max(TimeGenerated),
    RecentFailedAttempts = sum(RecentFailedAttempts),
    IPString = any(IPString),
    AccountName = any(AccountName)
  by UserPrincipalName, AppDisplayName
| extend IPAddresses = split(IPString, ",")
| extend UniqueSources = array_length(IPAddresses)
| project 
    TimeGenerated, 
    UserPrincipalName, 
    AccountName,
    AppDisplayName,
    RecentFailedAttempts,
    UniqueSources,
    IPAddresses
| sort by RecentFailedAttempts desc